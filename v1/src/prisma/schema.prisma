// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  full_name     String?
  password      String?
  profile_image String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Project       Project[]
  Section       Section[]
  Task          Task[]     @relation("Task")
  Assigned      Task[]     @relation("Assigned")
  Comments      Comments[]
}

model Project {
  id        Int       @id @default(autoincrement())
  name      String?
  user      User      @relation(fields: [user_id], references: [id])
  user_id   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Section   Section[]
  Task      Task[]

}

model Section {
  id         Int      @id @default(autoincrement())
  name       String?
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int
  project    Project  @relation(fields: [project_id], references: [id])
  project_id Int
  order      Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Task       Task[]

}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  user        User       @relation("Task", fields: [user_id], references: [id])
  user_id     Int
  assigned    User?      @relation("Assigned", fields: [assigned_to], references: [id])
  assigned_to Int?
  project     Project    @relation(fields: [project_id], references: [id])
  project_id  Int
  Section     Section    @relation(fields: [section_id], references: [id])
  section_id  Int
  order       Int?
  isComplate  Boolean?
  media       String?
  statues     Json?
  due_date    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comments    Comments[]
  SubTask     SubTask[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  text      String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
  task      Task     @relation(fields: [task_id], references: [id])
  task_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model SubTask {
  id        Int      @id @default(autoincrement())
  task      Task     @relation(fields: [task_id], references: [id])
  task_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
